Below is a simplified, reorganized set of notes for quick reference. All examples include comments that clarify their behavior. Some additional best practices are also included.

---

## **1. String Manipulation**

### **Subscripting (Indexing)**
```python
# Python indexing starts at 0 from the left and -1 from the right (to access from the end).

print("Hello"[1])   # 'e'  (2nd character)
print("Karan"[-1])  # 'n'  (last character)
print("Jason"[-2])  # 'o'  (2nd last character)
```

### **Concatenation**
```python
# Use + to join multiple strings.

print("123" + "456")  # Output: 123456
```

---

## **2. Numeric Data Types**

### **Integer**
```python
# Basic integer arithmetic.

print(20 + 40)  # Output: 60
```

### **Large Integers (Readable Format)**
```python
# Use underscores for readability; Python ignores them.

print(123_456_789)  # Output: 123456789
```

### **Float (Decimal Numbers)**
```python
# Floats are numbers with a decimal point.

print(3.14321)  # Output: 3.14321
```

### **Boolean**
```python
# Booleans represent True/False values.

print(True)
print(False)
```

---

## **3. Type Checking**
```python
# The type() function returns the data type of the given object.

print(type("Some text"))  # <class 'str'>
print(type(34223))        # <class 'int'>
print(type(False))        # <class 'bool'>
print(type(89.32))        # <class 'float'>
```

---

## **4. Type Conversion (Casting)**
```python
# Convert from one data type to another using built-in functions.

print(int("897234"))       # Convert string to integer
print(float("425.5434"))   # Convert string to float
print(bool("False"))       # Non-empty string => True (including "False")
```

---

## **5. User Input**
```python
# input() prompts the user and returns the typed string.

email = input("Enter the Email here: ")
print(email)
```
> **Best Practice**: Validate user input where appropriate (e.g., check if the email is valid).

---

## **6. String Functions**

### **Length of a String (`len()`)**
```python
# len() gives the number of characters in a string.

print(len("Jaskaran Singh"))  # Output: 14
```

> **Note**: `len()` also works on other sequences like lists, tuples, etc.

---

## **7. Mathematical Operators**

### **Division & Floor Division**
```python
print(10 / 2)   # Output: 5.0  (float division)
print(10 // 2)  # Output: 5    (integer (floor) division)
```

### **Exponentiation**
```python
print(2 ** 3)   # Output: 8   (2^3)
```

### **Rounding Numbers**
```python
# round(number, decimal_places) rounds to specified decimal places.
# By default, Python uses "Banker's Rounding".

print(round(8.8))         # Output: 9
print(round(8.5))         # Output: 8
print(round(22 / 7, 3))   # Output: 3.143
```

---

## **8. Assignment Operators**
```python
# Shorthand for performing operations and reassigning in one step.

x = 10
x += 2   # x = x + 2  => 12
x -= 1   # x = x - 1  => 11
x *= 3   # x = x * 3  => 33
x /= 2   # x = x / 2  => 16.5
```

---

## **9. Formatted Strings (`f-strings`)**
```python
# Insert variables directly into string literals.

name = "Jaskaran"
age = 25
print(f"My name is {name} and I am {age} years old.")
```

---

### **Additional Best Practices & Techniques**
- **Follow PEP 8** for consistent code style (e.g., variable naming, indentation).
- **Use meaningful variable names** to clarify code (e.g., `user_age` over `x`).
- **Comment your code** to explain *why* youâ€™re doing something, not just *what* is happening.
- **Validate user inputs** (e.g., check if numeric input can be safely converted to int/float).
- **Handle errors** using try/except blocks to avoid unexpected crashes.

This streamlined set of notes should cover the core basics while keeping your reference clean and clear!